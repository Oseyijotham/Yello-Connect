{"version":3,"file":"static/js/962.0c6ec893.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/Contacts/Contacts.module.css?5e71","components/Contacts/Contacts.jsx","redux/AppRedux/selectors.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"phoneBook\":\"ContactForm_phoneBook__Krcs9\",\"phoneBookContainer\":\"ContactForm_phoneBookContainer__zvme-\",\"formTitle\":\"ContactForm_formTitle__N6O4g\",\"formSection\":\"ContactForm_formSection__4wcn3\",\"button\":\"ContactForm_button__eSwX9\",\"buttonArea\":\"ContactForm_buttonArea__IAEoE\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formInput\":\"ContactForm_formInput__GszVU\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { addContact } from '../../redux/AppRedux/operations';\nimport { selectContacts, selectVal } from '../../redux/AppRedux/selectors';\nimport css from './ContactForm.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\n\nexport const ContactForm = ({ children }) => {\n  const contactNameId = nanoid();\n  const contactNumberId = nanoid();\n  const contacts = useSelector(selectContacts);\n  const myVal = useSelector(selectVal);\n  const dispatch = useDispatch();\n\n  const isMyVal = (bull) => {\n    if (bull) {\n      return false;\n    }\n    else return true;\n  }\n\n  const handleButtonPress = evt => {\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n    }, 1000);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const currentName = event.target[0].value;\n\n    const isNameDuplicate = contacts.some(\n      contact =>\n        contact.name.trim().toLowerCase() === currentName.trim().toLowerCase()\n    );\n    if (isNameDuplicate) {\n      alert('This name already exists');\n\n      return;\n    }\n\n    dispatch(\n      addContact({ name: event.target[0].value, phone: event.target[1].value })\n    );\n   \n    console.log({ name: event.target[0].value, phone: event.target[1].value });\n     event.target.reset();\n  };\n\n  return (\n    <div className={css.phoneBook}>\n      <h2 className={css.formTitle}>Phonebook</h2>\n      <form onSubmit={handleSubmit} className={css.formSection}>\n        <label className={css.loginLabel}>\n          <span className={css.formLabel}>Name:</span>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Name\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n            required\n            autoComplete=\"off\"\n            id={contactNameId}\n            className={css.formInput}\n            disabled={isMyVal(myVal)}\n          />\n        </label>\n        <label>\n          <span className={css.formLabel}>Number:</span>\n          <input\n            type=\"tel\"\n            placeholder=\"Enter Number\"\n            autoComplete=\"off\"\n            name=\"number\"\n            required\n            id={contactNumberId}\n            className={css.formInput}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            disabled={isMyVal(myVal)}\n          />\n        </label>\n        <div className={css.buttonArea}>\n          <button\n            type=\"submit\"\n            name=\"button\"\n            className={css.button}\n            onClick={handleButtonPress}\n            disabled={isMyVal(myVal)}\n          >\n            Add Contact\n          </button>\n        </div>\n      </form>\n      {children}\n    </div>\n  );\n};\n\nContactForm.propTypes = {\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsSection\":\"ContactList_contactsSection__3KZcT\",\"contactsTitle\":\"ContactList_contactsTitle__gHlpa\",\"contactsList\":\"ContactList_contactsList__7leRd\",\"contactsData\":\"ContactList_contactsData__gZODb\",\"contactsItem\":\"ContactList_contactsItem__x8C9b\",\"contactsDetails\":\"ContactList_contactsDetails__71j6L\",\"contactsName\":\"ContactList_contactsName__6rTA7\",\"contactsButton\":\"ContactList_contactsButton__6hBLW\"};","import { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { selectContacts } from '../../redux/AppRedux/selectors';\nimport {\n  selectContactsFilter,\n  selectVal,\n} from '../../redux/AppRedux/selectors';\nimport { deleteContact } from '../../redux/AppRedux/operations';\nimport css from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nexport const ContactList = ({ children }) => {\n  const contacts = useSelector(selectContacts);\n   const myVal = useSelector(selectVal);\n  const dispatch = useDispatch();\n  const handleDelete = evt => {\n    evt.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n    setTimeout(() => {\n      evt.target.style.boxShadow = 'none';\n    }, 1000);\n    dispatch(deleteContact(evt.target.name));\n  };\n  const filterValue = useSelector(selectContactsFilter);\n\n  return (\n    <div className={css.contactsSection}>\n      <h3 className={css.contactsTitle}>Contacts</h3>\n      {children}\n      {filterValue === '' &&\n        contacts.length !== 0 && myVal &&(\n          <ul className={css.contactsList}>\n            {contacts.map(contact => (\n              <li key={contact._id} className={css.contactsItem}>\n                <span className={css.contactsData}>\n                  {contact.name}: {contact.phone}\n                </span>\n                <button\n                  type=\"submit\"\n                  className={css.contactsButton}\n                  name={contact._id}\n                  onClick={handleDelete}\n                >\n                  Delete\n                </button>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  children: PropTypes.node,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"formLabel\":\"Filter_formLabel__Ozoh5\",\"formInput\":\"Filter_formInput__XNLZn\",\"contactsList\":\"Filter_contactsList__78f6h\",\"contactsData\":\"Filter_contactsData__q4ogS\",\"contactsItem\":\"Filter_contactsItem__CHFiw\"};","import { useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/AppRedux/selectors';\nimport { selectContactsFilter } from '../../redux/AppRedux/selectors';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\nimport { setFilter } from '../../redux/AppRedux/filterSlice';\n\nexport const Filter = () => {\n  const searchTermId = nanoid();\n  const contacts = useSelector(selectContacts);\n  const filterValue = useSelector(selectContactsFilter);\n  const dispatch = useDispatch();\n  const handleSearch = event => {\n    dispatch(setFilter(event.target.value));\n    console.log(event.target.value);\n  };\n  const bestMatches = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filterValue.trim().toLowerCase()) &&\n      filterValue.trim() !== ''\n  );\n\n  return (\n    <div className={css.contactList}>\n      <label htmlFor={searchTermId}>\n        <span className={css.formLabel}>Find Contacts By Name:</span>\n        <input\n          type=\"text\"\n          placeholder=\"Enter Name\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan.\"\n          required\n          onChange={handleSearch}\n          id={searchTermId}\n          autoComplete=\"off\"\n          className={css.formInput}\n        />\n      </label>\n\n      {filterValue !== '' && bestMatches.length !== 0 &&(\n          <ul className={css.contactsList}>\n            {bestMatches.map(contact => (\n              <li key={contact.id} className={css.contactsItem}>\n                <span className={css.contactsData}>\n                  {contact.name}: {contact.phone}\n                </span>\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"coverWrapper\":\"Contacts_coverWrapper__X4gza\",\"cover\":\"Contacts_cover__5wLbf\",\"keyModal\":\"Contacts_keyModal__89kQz\",\"keyModalLabel\":\"Contacts_keyModalLabel__U848M\",\"keyModalButton\":\"Contacts_keyModalButton__FiBJT\",\"form\":\"Contacts_form__mYayM\",\"input\":\"Contacts_input__QpUjA\",\"label\":\"Contacts_label__hEYtW\",\"formContainer\":\"Contacts_formContainer__1ym+l\"};","import { ContactForm } from '../ContactForm/ContactForm';\nimport { ContactList } from '../ContactList/ContactList';\nimport { Filter } from '../Filter/Filter';\nimport { useEffect } from 'react';\nimport { fetchContacts, retrieveApiKey } from '../../redux/AppRedux/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVal,\n  selectIsKeyLoading,\n} from '../../redux/AppRedux/selectors';\nimport { getApiKey } from '../../redux/AppRedux/operations';\nimport  css  from './Contacts.module.css';\n\nexport const Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const myVal = useSelector(selectVal);\n  const isMyValLoading = useSelector(selectIsKeyLoading);\n\n   const handleButtonPress = e => {\n     e.target.style.boxShadow = 'inset 0 0 10px 5px rgba(0, 0, 0, 0.3)';\n     setTimeout(() => {\n       e.target.style.boxShadow = 'none';\n     }, 2000);\n\n      //dispatch(getApiKey());\n  };\n  \n  const handleSubmit = e => {\n     e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      getApiKey({\n        name: form.elements.name.value,\n        customMetaData: form.elements.customMetaData.value,\n        customAccountId: form.elements.customAccountId.value,\n      })\n    );\n    \n  /*const fetchData = async () => {\n    await dispatch(\n      getApiKey({\n        name: form.elements.name.value,\n        customMetaData: form.elements.customMetaData.value,\n        customAccountId: form.elements.customAccountId.value,\n      })\n    );\n      \n       await dispatch(retrieveApiKey());\n  };\n\n   fetchData();*/\n    /*console.log({\n      name: form.elements.name.value,\n      customMetaData: form.elements.customMetaData.value,\n      customAccountId: form.elements.customAccountId.value,\n    });*/\n   };\n\n  useEffect(() => {\n    dispatch(retrieveApiKey());\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  //console.log(myVal);\n\n  return (\n    <div className={css.coverWrapper}>\n      {myVal === null && (\n        <div className={css.cover}>\n          <div className={css.keyModal}>\n            <span className={css.keyModalLabel}>\n              To access the endpoints that this page uses you first need to\n              create an API KEY, fill the form bellow to create an API KEY.\n            </span>\n            {isMyValLoading && !error && <b>Generating your API KEY...</b>}\n            {error && !isMyValLoading && <b>Could not Generate Key</b>}\n            <div className={css.formContainer}>\n              <form\n                className={css.form}\n                onSubmit={handleSubmit}\n                autoComplete=\"off\"\n              >\n                <label className={css.label}>\n                  Name of API KEY\n                  <input\n                    type=\"text\"\n                    name=\"name\"\n                    className={css.input}\n                    required\n                  />\n                </label>\n                <label className={css.label}>\n                  Custom Account Id\n                  <input\n                    type=\"text\"\n                    name=\"customAccountId\"\n                    className={css.input}\n                    required\n                  />\n                </label>\n                <label className={css.label}>\n                  Custom Meta Data\n                  <input\n                    type=\"text\"\n                    name=\"customMetaData\"\n                    className={css.input}\n                    required\n                  />\n                </label>\n                <button\n                  className={css.keyModalButton}\n                  onClick={handleButtonPress}\n                >\n                  CREATE API KEY\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      )}\n      <ContactForm>\n        {isLoading && !error && <b>Please wait...</b>}\n        {error && <b>There was an error</b>}\n        <ContactList>\n          <Filter />\n        </ContactList>\n      </ContactForm>\n    </div>\n  );\n};\n\nexport default Contacts;\n","export const selectContacts = state => state.contacts.contacts.items;\n\nexport const selectContactsFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectIsKeyLoading = state => state.contacts.contacts.isKeyLoading;\n\nexport const selectError = state => state.contacts.contacts.error;\n\nexport const selectVal = state => state.contacts.contacts.val;\n\nexport const selectValName = state => state.contacts.contacts.valName;\n\nexport const selectValId = state => state.contacts.contacts.valId;\n\nexport const selectValDate = state => state.contacts.contacts.valDate;"],"names":["nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","_ref","children","contactNameId","contactNumberId","contacts","useSelector","selectContacts","myVal","selectVal","dispatch","useDispatch","isMyVal","bull","_jsxs","className","css","_jsx","onSubmit","event","preventDefault","currentName","target","value","some","contact","name","trim","toLowerCase","alert","addContact","phone","console","log","reset","type","placeholder","pattern","title","required","autoComplete","disabled","onClick","evt","style","boxShadow","setTimeout","ContactList","handleDelete","deleteContact","filterValue","selectContactsFilter","map","_id","Filter","searchTermId","bestMatches","filter","includes","htmlFor","onChange","setFilter","Contacts","isLoading","selectIsLoading","error","selectError","isMyValLoading","selectIsKeyLoading","useEffect","retrieveApiKey","fetchContacts","e","form","currentTarget","getApiKey","elements","customMetaData","customAccountId","state","items","isKeyLoading","val","selectValName","valName","selectValId","valId","selectValDate","valDate"],"sourceRoot":""}